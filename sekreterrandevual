/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import javax.imageio.ImageIO;
import javax.swing.*;

public class sekreter_randevu_al extends javax.swing.JFrame {

    Connection conn = null;
    ResultSet rs = null;
    PreparedStatement pst = null;

    public sekreter_randevu_al() {
        initComponents();
        setResizable(false);
        conn = Database.java_db();

        ekranortala();

        currentDate();
    }

    public void ekranortala() {
        Toolkit toolkit = getToolkit();
        Dimension size = toolkit.getScreenSize();
        this.setSize(1095, 800);
        setLocation(size.width / 2 - getWidth() / 2, size.height / 2 - getHeight() / 2);

    }

    public void currentDate() {
        Calendar cal = new GregorianCalendar();
        int month = cal.get(Calendar.MONTH);
        int year = cal.get(Calendar.YEAR);
        int day = cal.get(Calendar.DAY_OF_MONTH);

        date.setText((month + 1) + "/" + (day) + "/" + (year));

        int second = cal.get(Calendar.SECOND);
        int minute = cal.get(Calendar.MINUTE);
        int hour = cal.get(Calendar.HOUR);

        time.setText((hour) + ":" + (minute) + ":" + (second));

    }

    private void cb_doldur(int bolum) {
        try {
            String sql = "select * from Doktor where bolum_id =" + bolum + "";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                String ad = rs.getString("doktorad");
                String soyad = rs.getString("doktorsoyad");
                doktorsec.addItem(ad + " " + soyad);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }

    private boolean kontrol() {
        boolean k = true;

        try {
            String sql = "select * from Beyinvesinircerrahisi where Saat = ? and Tarih = ? ";
            pst = conn.prepareStatement(sql);
            rs = pst.executeQuery();
            while (rs.next()) {
                String saat = rs.getString("Saat");
                String tarih = rs.getString("Tarih");
                if (saatsec.getSelectedItem().toString().equals(saat.toString())) {
                    if (tarihsec.getText().equals(tarih.toString())) {
                        k = false;
                    }
                }
                pst.execute();
                k = true;

            }

            return k;
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
            k = false;
            return k;
        }

    }
    
    private void fieldyazdir(){
        try
        {

            String doktor = doktorsec.getSelectedItem().toString();
            String bolumad = bolumsec.getSelectedItem().toString();
            String[] doktor1 = doktor.split(" ");

            infoarea.append("\n \n "+bolumad);
            String sql="select * from Doktor where  doktorad = ?";

            pst=conn.prepareStatement(sql);
            pst.setString(1, doktor1[0]);
            rs=pst.executeQuery();

            String ad1=rs.getString("doktorad");
            String ad2=rs.getString("doktorsoyad");
            String ad4=rs.getString("doktoremail");
            String ad5=rs.getString("doktortelefon");

            infoarea.append(" \n \n"+
                    "Randevu Bilgileri\n"+
                    "Doktor adı: " + ad1 +"\n"+
                    "Doktor soyadı: " + ad2 + "\n" +
                    "Doktor email: " + ad4 + "\n" +
                    "Doktor tel: " + ad5 + "\n"+
                    "Randevu tarihi: " + tarihsec.getText()+"\n"+
                    "Randevu saati: " + saatsec.getSelectedItem().toString()+"\n"
                    );
        }
        catch(Exception ex)
        {
              JOptionPane.showMessageDialog(null, "Hata.");
        }
    }
    
    private void randevu_mod(String bolum){
        try{
            String doktor = doktorsec.getSelectedItem().toString();
            String[] doktor1 = doktor.split(" ");
            String sql = "insert into "+ bolum +" (hastatc,Saat,Doktorad,Doktorsoyad,Tarih) values (?,?,?,?,?) ";
            pst = conn.prepareStatement(sql);
            pst.setString(1, hastatc.getText());
            pst.setString(2, saatsec.getSelectedItem().toString());
            pst.setString(3,doktor1[0]);
            pst.setString(4,doktor1[1]);
            pst.setString(5, tarihsec.getText());

            pst.execute();
            JOptionPane.showMessageDialog(null, "Randevu başarıyla alındı.");




        }catch(Exception e){
            JOptionPane.showMessageDialog(null, e);
        }
        finally {
                    try {
                        rs.close();
                        pst.close();
                    } catch (Exception ex) {

                    }
                }
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        bolumsec = new javax.swing.JComboBox<>();
        doktorsec = new javax.swing.JComboBox<>();
        saatsec = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        infoarea = new javax.swing.JTextArea();
        randevu_al = new javax.swing.JButton();
        tarihsec = new javax.swing.JFormattedTextField();
        jLabel5 = new javax.swing.JLabel();
        hastatc = new javax.swing.JTextField();
        Geri = new javax.swing.JButton();
        Temizle = new javax.swing.JButton();
        background = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        date = new javax.swing.JMenu();
        time = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(null);

        jLabel2.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(250, 250, 250));
        jLabel2.setText("Tarih:");
        getContentPane().add(jLabel2);
        jLabel2.setBounds(110, 240, 60, 30);

        jLabel3.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(250, 250, 250));
        jLabel3.setText("Saat:");
        getContentPane().add(jLabel3);
        jLabel3.setBounds(110, 300, 70, 40);

        jLabel4.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(250, 250, 250));
        jLabel4.setText("Doktor:");
        getContentPane().add(jLabel4);
        jLabel4.setBounds(110, 180, 70, 30);

        jLabel1.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(250, 250, 250));
        jLabel1.setText("Bölüm:");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(110, 110, 70, 40);

        bolumsec.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        bolumsec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bölüm seçiniz", "Beyin ve sinir cerrahisi", "Kardiyoloji", "Nöroloji", "Psikoloji", "Üroloji", "Ağız ve diş sağlığı", "Cildiye", "Plastik cerrahi", "Genel cerrahi", "Göz hastalıkları", "Kulak burun boğaz", "İç hastalıkları", "Kadın doğum" }));
        bolumsec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bolumsecActionPerformed(evt);
            }
        });
        getContentPane().add(bolumsec);
        bolumsec.setBounds(180, 120, 130, 30);

        doktorsec.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        doktorsec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Doktor seçiniz" }));
        doktorsec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                doktorsecActionPerformed(evt);
            }
        });
        getContentPane().add(doktorsec);
        doktorsec.setBounds(180, 180, 130, 30);

        saatsec.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        saatsec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Saat seçiniz", "09.00", "09.30", "10.00", "10.30", "11.00", "11.30", "13.00", "13.30", "14.00", "14.30", "15.00", "15.30", "16.00", "16.30" }));
        getContentPane().add(saatsec);
        saatsec.setBounds(180, 300, 130, 30);

        infoarea.setEditable(false);
        infoarea.setColumns(20);
        infoarea.setRows(5);
        jScrollPane1.setViewportView(infoarea);

        getContentPane().add(jScrollPane1);
        jScrollPane1.setBounds(680, 60, 380, 520);

        randevu_al.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        randevu_al.setText("Randevu al");
        randevu_al.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randevu_alActionPerformed(evt);
            }
        });
        getContentPane().add(randevu_al);
        randevu_al.setBounds(500, 390, 140, 40);

        tarihsec.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(java.text.DateFormat.getDateInstance(java.text.DateFormat.SHORT))));
        getContentPane().add(tarihsec);
        tarihsec.setBounds(180, 240, 130, 30);

        jLabel5.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(250, 250, 250));
        jLabel5.setText("Hasta TC:");
        getContentPane().add(jLabel5);
        jLabel5.setBounds(100, 60, 70, 30);
        getContentPane().add(hastatc);
        hastatc.setBounds(180, 60, 130, 30);

        Geri.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        Geri.setText("Geri");
        Geri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GeriActionPerformed(evt);
            }
        });
        getContentPane().add(Geri);
        Geri.setBounds(500, 470, 140, 40);

        Temizle.setFont(new java.awt.Font("Calibri", 1, 14)); // NOI18N
        Temizle.setText("Temizle");
        Temizle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TemizleActionPerformed(evt);
            }
        });
        getContentPane().add(Temizle);
        Temizle.setBounds(500, 313, 140, 40);

        background.setIcon(new javax.swing.ImageIcon(getClass().getResource("/test/images/background1.jpg"))); // NOI18N
        background.setText("jLabel1");
        getContentPane().add(background);
        background.setBounds(0, 0, 1090, 750);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        date.setText("date");
        jMenuBar1.add(date);

        time.setText("time");
        jMenuBar1.add(time);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>                        

    private void bolumsecActionPerformed(java.awt.event.ActionEvent evt) {                                         

        //int a = 5;
        //while (a<=0) {
        String a1 = bolumsec.getSelectedItem().toString();

        //1
        if (a1.equals("Beyin ve sinir cerrahisi")) {

            try {
                cb_doldur(1);
            } catch (Exception e) {
            }
        } //2
        else if (a1.equals("Kardiyoloji")) {

            try {
                cb_doldur(2);
            } catch (Exception e) {
            }
        } //3
        else if (a1.equals("Nöroloji")) {

            try {
                cb_doldur(3);
            } catch (Exception e) {
            }
        } //4
        else if (a1.equals("Psikoloji")) {

            try {
                cb_doldur(4);
            } catch (Exception e) {
            }
        } //5
        else if (a1.equals("Üroloji")) {

            try {
                cb_doldur(5);
            } catch (Exception e) {
            }
        } //6
        else if (a1.equals("Ağız ve diş sağlığı")) {

            try {
                cb_doldur(6);
            } catch (Exception e) {
            }
        } //7
        else if (a1.equals("Cildiye")) {

            try {
                cb_doldur(7);
            } catch (Exception e) {
            }
        } //8
        else if (a1.equals("Plastik cerrahi")) {

            try {
                cb_doldur(8);
            } catch (Exception e) {
            }
        } //9
        else if (a1.equals("Genel cerrahi")) {

            try {
                cb_doldur(9);
            } catch (Exception e) {
            }
        } //10
        else if (a1.equals("Göz hastalıkları")) {

            try {
                cb_doldur(10);
            } catch (Exception e) {
            }
        } //11
        else if (a1.equals("Kulak burun boğaz")) {

            try {
                cb_doldur(11);
            } catch (Exception e) {
            }
        } else if (a1.equals("İç hastalıkları")) {

            try {
                cb_doldur(12);
            } catch (Exception e) {
            }
        } else if (a1.equals("Kadın hastalıkları")) {

            try {
                cb_doldur(13);
            } catch (Exception e) {
            }
        }


    }                                        

    private void randevu_alActionPerformed(java.awt.event.ActionEvent evt) {                                           
        int x = JOptionPane.showConfirmDialog(null, "Randevunuz Oluşturulsunmu...", "Evet", JOptionPane.YES_NO_OPTION);
        String a1 = (String) bolumsec.getSelectedItem();
        boolean k = kontrol();
        if (k == false) {
            JOptionPane.showMessageDialog(null, "Bu tarih ve saat dolu ");
        } else {
            if (x == 0 && a1.equals("Beyin ve sinir cerrahisi")) {

                randevu_mod("Beyinvesinircerrahisi");
                fieldyazdir();
            }
            
            
            //2
            if (x == 0 && a1.equals("Kardiyoloji")) {
                randevu_mod("Kardiyoloji");

                
                fieldyazdir();
            }
            
            
            //3
            if (x == 0 && a1.equals("Nöroloji")) {
                randevu_mod("Noroloji");

                fieldyazdir();
            }
            
            
            //4
            if (x == 0 && a1.equals("Psikoloji")) {

                randevu_mod("Psikoloji");
                 
                fieldyazdir();
            }
            
            
            //5
            if (x == 0 && a1.equals("Üroloji")) {

                randevu_mod("Uroloji");
                 
                fieldyazdir();
            }
            
            
            //6
            if (x == 0 && a1.equals("Ağız ve diş sağlığı")) {

                randevu_mod("Agizvedissagligi");
                 
                fieldyazdir();
            }
            
            
            //7
            if (x == 0 && a1.equals("Cildiye")) {

                randevu_mod("Cildiye");
                 
                fieldyazdir();
            }
            
            
            //8
            if (x == 0 && a1.equals("Plastik cerrahi")) {

                randevu_mod("Plastikcerrahi");
                 
                fieldyazdir();
            }
            
            
            //9
            if (x == 0 && a1.equals("Genel cerrahi")) {

                randevu_mod("Genelcerrahi");
                
                fieldyazdir();
            }
            
            
            //10
            if (x == 0 && a1.equals("Göz hastalıkları")) {

                randevu_mod("Gozhastaliklari");
                 
                fieldyazdir();
            }
            
            
            //11
            if (x == 0 && a1.equals("Kulak burun boğaz")) {

                randevu_mod("Kulakburunbogaz");
                
                fieldyazdir();
            }
            
            
            //12
            if (x == 0 && a1.equals("İç hastalıkları")) {

                randevu_mod("Ichastaliklari");
                 
                fieldyazdir();
            }
            
            
            //13
            if (x == 0 && a1.equals("Kadın doğum")) {

                randevu_mod("Kadindogum");
                
                fieldyazdir();
            }
        }
    }                                          

    private void doktorsecActionPerformed(java.awt.event.ActionEvent evt) {                                          
        // TODO add your handling code here:
    }                                         

    private void GeriActionPerformed(java.awt.event.ActionEvent evt) {                                     

        this.dispose();
        menu h = new menu();
        h.setVisible(true);


    }                                    

    private void TemizleActionPerformed(java.awt.event.ActionEvent evt) {                                        

        hastatc.setText("");
        bolumsec.setSelectedIndex(0);
        doktorsec.removeAllItems();
        doktorsec.addItem("Doktor seçiniz");
        saatsec.setSelectedIndex(0);
        tarihsec.setText("");
        
    }                                       

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(sekreter_randevu_al.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(sekreter_randevu_al.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(sekreter_randevu_al.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(sekreter_randevu_al.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new sekreter_randevu_al().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton Geri;
    private javax.swing.JButton Temizle;
    private javax.swing.JLabel background;
    private javax.swing.JComboBox<String> bolumsec;
    private javax.swing.JMenu date;
    private javax.swing.JComboBox<String> doktorsec;
    private javax.swing.JTextField hastatc;
    private javax.swing.JTextArea infoarea;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton randevu_al;
    private javax.swing.JComboBox<String> saatsec;
    private javax.swing.JFormattedTextField tarihsec;
    private javax.swing.JMenu time;
    // End of variables declaration                   
}
